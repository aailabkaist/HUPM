
import os, json, sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from util import SAVE, LOAD, level_dic, _get_class_names
from collections import defaultdict


def get_trans_dic(class_hierarchy, level=2):
    if level == 3:
        lv1_to_lv2 = {int(l1):list(l2) for l1,l2 in class_hierarchy.items()}
        lv2_to_lv3 = {}
        for values in class_hierarchy.values():
            for l2, l3 in values.items():
                lv2_to_lv3[l2] = l3
        lv1_to_lv3 = {int(l1):[] for l1 in lv1_to_lv2.keys()}
        for l1, l2 in lv1_to_lv2.items():
            for l in l2:
                lv1_to_lv3[l1].extend(lv2_to_lv3[l])
    elif level == 2:
        lv1_to_lv2 = {int(l1): l2 for l1, l2 in class_hierarchy.items()}
        lv2_to_lv3, lv1_to_lv3 = None, None

    return lv1_to_lv2, lv2_to_lv3, lv1_to_lv3

true = True
mine = not true
childchild = False

checkpoint = "hw_cars"
dataset = 'cub2'
edges = [(0, 13, 0.958), (0, 95, 0.982), (0, 136, 0.96), (0, 138, 0.996), (0, 139, 0.976), (1, 14, 0.975), (1, 116, 0.99), (1, 117, 0.989), (1, 118, 0.891), (1, 119, 0.975), (2, 71, 0.998), (2, 141, 0.944), (2, 154, 0.993), (3, 16, 0.901), (3, 17, 0.913), (3, 18, 0.591), (3, 54, 0.751), (3, 55, 0.779), (3, 56, 0.963), (3, 57, 0.627), (3, 108, 0.906), (3, 109, 0.904), (3, 110, 0.91), (3, 111, 0.911), (3, 113, 0.925), (3, 114, 0.97), (3, 115, 0.973), (3, 120, 0.714), (3, 121, 0.518), (3, 133, 0.921), (3, 155, 0.935), (3, 190, 0.949),(3, 191, 0.749), (3, 192, 0.948), (3, 193, 0.925), (3, 194, 0.953), (3, 195, 0.905), (3, 196, 0.913), (4, 19, 0.965), (4, 128, 0.962), (4, 129, 0.988), (4, 130, 0.982), (4, 131, 0.976), (4, 132, 0.863), (5, 20, 0.95), (5, 53, 0.911), (5, 80, 0.842), (5, 81, 0.962), (5, 82, 0.945), (5, 159, 0.78), (6, 21, 0.743), (7, 22, 0.886), (7, 23, 0.925), (7, 24, 0.925), (7, 25, 0.631), (7, 26, 0.891), (7, 27, 0.951), (7, 28, 0.947), (7, 29, 0.915), (7, 30, 0.923), (7, 31, 0.944), (7, 32, 0.905), (7, 33, 0.786), (7, 34, 0.907), (7, 35,0.934), (7, 36, 0.921), (7, 37, 0.892), (7, 38, 0.852), (7, 39, 0.877), (7, 40, 0.827), (7, 41, 0.894), (7, 42, 0.923), (7, 58, 0.859), (7, 59, 0.925), (7, 60, 0.924), (7, 61, 0.766), (7, 62, 0.799), (7, 63, 0.937), (7, 64, 0.984), (7, 65, 0.917), (7, 66, 0.946), (7, 67, 0.914), (7, 68, 0.917), (7, 69, 0.942), (7, 70, 0.936), (7, 75, 0.88), (7, 76, 0.945), (7, 77, 0.799), (7, 78, 0.912), (7, 79, 0.932), (7, 83, 0.884), (7, 84, 0.962), (7, 86, 0.866), (7, 87, 0.883), (7, 88, 0.894), (7, 89, 0.692), (7, 90, 0.896), (7, 91, 0.953), (7, 92, 0.791), (7, 96, 0.957), (7, 97, 0.954), (7, 98, 0.835), (7, 103, 0.872), (7, 104, 0.964), (7, 105, 0.943), (7, 106, 0.931), (7, 122, 0.884), (7, 123, 0.956), (7, 124, 0.919), (7, 125, 0.948), (7, 126, 0.898), (7, 127, 0.857), (7, 134, 0.941), (7, 137,0.894), (7, 140, 0.937), (7, 142, 0.887), (7, 143, 0.641), (7, 144, 0.923), (7, 145, 0.886), (7, 146, 0.91), (7, 147, 0.868), (7, 148, 0.795), (7, 151, 0.838), (7, 152, 0.947), (7, 153, 0.882), (7, 156, 0.805), (7, 157, 0.811), (7, 158, 0.963), (7, 160, 0.926), (7, 161, 0.912), (7, 162, 0.84), (7, 163, 0.87), (7, 164, 0.86), (7, 165, 0.9), (7, 166, 0.925), (7, 167, 0.946), (7, 168, 0.928), (7, 169, 0.945), (7, 170, 0.945), (7, 171, 0.885), (7, 172, 0.843), (7, 173, 0.953), (7, 174, 0.911), (7, 175, 0.938), (7, 176, 0.955), (7, 177, 0.982), (7, 178, 0.928), (7, 179, 0.897), (7, 180, 0.973), (7, 181, 0.932), (7, 182, 0.95), (7, 183, 0.848), (7, 184, 0.973), (7, 185, 0.898), (7, 186, 0.92), (7, 187, 0.93), (7, 188, 0.935), (7, 189, 0.928), (7, 197, 0.938), (7, 198, 0.919), (7, 199, 0.917), (7, 200, 0.897), (7, 201, 0.947), (7, 202, 0.832), (7, 203, 0.869), (7, 204, 0.903), (7, 205, 0.918), (7, 206, 0.905), (7, 207, 0.878), (7, 208, 0.868), (7, 209, 0.927), (7, 210, 0.903), (7, 211, 0.935), (7, 212, 0.801), (7, 213, 0.912), (7, 214, 0.823), (7, 215, 0.976), (7, 216, 0.895), (7, 217, 0.948), (7, 218, 0.894), (7, 219, 0.886), (7, 220, 0.988), (7, 221, 0.92), (7, 222, 0.871), (7, 223, 0.94), (7, 224, 0.877), (7, 225, 0.915), (7, 226, 0.862), (7, 227, 0.833), (7, 228, 0.753), (7, 229, 0.957), (7, 230, 0.913), (7, 231, 0.947), (7, 232, 0.953), (7, 233, 0.85), (7, 234, 0.95), (7, 235, 0.959), (7, 242, 0.906), (7, 243, 0.809), (7, 244, 0.919), (7, 245, 0.819), (7, 246, 0.816), (7, 247, 0.805), (7, 248, 0.87), (7, 249, 0.926), (8, 43, 0.942), (8, 149, 0.892), (8, 150, 0.973), (9, 44, 0.99), (9, 85, 0.97), (9, 236, 0.838), (9, 237, 0.978), (9, 238, 0.997), (9, 239, 0.987), (9, 240, 0.899), (9, 241, 0.989), (10, 99, 0.988), (10, 100, 0.973), (10, 101, 0.922), (10, 102, 0.924), (11, 46, 0.971), (11, 47, 0.871), (11, 50, 0.939), (11, 51, 0.927), (11, 52, 0.767), (11, 94, 0.92), (12, 48, 0.976), (12, 72, 0.968), (12, 73, 0.969), (12, 74, 0.889), (12, 93, 0.744), (13, 95, 0.988), (13, 136, 0.982), (13, 138, 0.991), (13, 139, 0.941), (14, 116, 0.989), (14, 117, 0.995), (14, 118, 0.849), (14, 119, 0.987), (15, 71, 0.997), (15, 141, 0.978), (15, 154, 0.995), (16, 54, 0.984), (16, 55, 0.966), (16, 56, 0.982), (16, 57, 0.785), (16, 155, 0.971), (17, 108, 0.974), (17, 109, 0.986), (17, 110, 0.913), (17, 111, 0.986), (17, 112, 0.519), (17, 113, 0.986), (17, 114, 0.944), (17, 115, 0.994), (17, 133, 0.848), (17, 190, 0.966), (17, 191, 0.824), (17, 192, 0.966), (17, 193, 0.857), (17, 194, 0.91), (17, 195, 0.972), (17, 196, 0.946), (18, 120, 0.869), (18, 121, 0.749), (19, 128, 0.954), (19, 129, 0.97), (19, 130, 0.965), (19, 131, 0.972), (19, 132, 0.928), (20, 53, 0.877), (20, 80, 0.876), (20, 81, 0.98), (20, 82, 0.898), (20, 159, 0.688), (23, 235, 0.811), (24, 63, 0.983), (24, 64, 0.851), (24, 65, 0.974), (24, 66, 0.967), (24, 103, 0.959), (24, 106, 0.951), (24, 188, 0.911), (24, 189, 0.955), (25, 77, 0.844), (26, 78, 0.743), (26, 79, 0.882), (26, 122, 0.925), (26, 123, 0.97), (26, 124, 0.875), (26, 142, 0.577), (26, 156, 0.922), (26, 157, 0.699), (27, 83, 0.809), (27, 84, 0.635), (27, 96, 0.933), (27, 97, 0.857), (27, 104, 0.861), (27, 105, 0.902), (28, 184, 0.887), (28, 185, 0.996), (28, 186, 0.993), (28, 187, 0.531), (29, 58, 0.76), (29, 59, 0.899), (29, 60, 0.78), (29, 61, 0.768), (29, 62, 0.656), (29, 75, 0.698), (29, 98, 0.5), (29, 144, 0.819), (29, 145, 0.888), (29, 146, 0.731), (29, 147, 0.743), (31, 160, 0.982), (31, 161, 0.995), (32, 68, 0.504), (32, 140, 0.888), (32, 199, 0.736), (33, 153, 0.849), (34, 148, 0.897), (34, 158, 0.771), (34, 207, 0.97), (34, 208, 0.972), (34, 209, 0.92), (34, 210, 0.867), (34, 211, 0.964), (34, 212, 0.977), (34, 213, 0.906), (34,214, 0.892), (34, 215, 0.837), (34, 216, 0.897), (34, 217, 0.97), (34, 218, 0.982), (34, 219, 0.785), (34, 220, 0.969), (34, 221, 0.954), (34, 222, 0.956), (34, 223, 0.883), (34, 224, 0.933), (34, 225, 0.934), (34, 226, 0.768), (34, 227, 0.787), (34, 228, 0.905), (34, 229, 0.931), (34, 230, 0.97), (34, 231, 0.928), (34, 232, 0.977), (34, 233, 0.889), (34, 249, 0.937), (35, 125, 0.788), (35, 162, 0.975), (35, 164, 0.951), (35, 165, 0.935), (35, 166, 0.984), (35, 168, 0.918), (35, 169, 0.603), (35, 170, 0.979), (35, 171, 0.884), (35, 172, 0.918), (35, 173, 0.947), (35, 174, 0.877), (35, 175, 0.942), (35, 176, 0.992), (35, 177, 0.858), (35, 178, 0.974), (35, 180, 0.938), (35, 181, 0.944), (35, 182, 0.928), (35, 197, 0.657), (36, 167, 0.891), (36, 179, 0.979), (38, 143, 0.89), (39, 183, 0.938), (40, 242, 0.878), (40, 243, 0.591), (40, 244, 0.954), (40, 245, 0.957), (40, 246, 0.952), (40, 247, 0.992), (40, 248, 0.702), (41, 86, 0.845), (41, 87, 0.872), (41, 88, 0.967), (41, 89, 0.916), (41, 91, 0.885), (41, 92, 0.692), (41, 126, 0.892), (41, 127, 0.833), (41, 151, 0.97), (41, 152, 0.903), (42, 200, 0.803), (42, 201, 0.99), (42, 202, 0.716), (42, 203, 0.934), (42, 204, 0.676), (42, 205, 0.83), (42, 206, 0.667), (43, 149, 0.899), (43, 150, 0.97), (44, 85, 0.937), (44, 236, 0.846), (44, 237, 0.982), (44, 238, 0.993), (44, 239, 0.971), (44, 240, 0.895), (44, 241, 0.992), (45, 99, 0.989), (45, 100, 0.963), (45, 101, 0.947), (45, 102, 0.943), (46, 50, 0.942), (46, 51, 0.915), (46, 52, 0.74), (47, 94, 0.651), (48, 72, 0.981), (48, 73, 0.913), (48, 74, 0.94), (7, 5, 0.723), (7, 20, 0.773), (7, 53, 0.803), (7, 80, 0.852), (7, 81, 0.773), (7, 82, 0.668), (7, 159, 0.68), (15, 2, 0.983), (34, 30, 0.855), (34, 42, 0.77), (34, 69, 0.706), (34, 200, 0.785), (34, 201, 0.886), (34, 202, 0.814), (34, 204, 0.795), (34, 205, 0.72), (34, 206, 0.922), (35, 36, 0.709), (35, 167, 0.793), (35, 179, 0.793), (36, 165, 0.777), (45, 10, 0.961), (46, 47, 0.843), (46, 94, 0.917), (54, 56, 0.683), (61, 145, 0.678), (63, 64, 0.558), (63, 103, 0.79), (67, 37, 0.928), (71, 154, 0.899), (72, 74, 0.772), (78, 76, 0.712), (78, 79, 0.748), (78, 156, 0.517), (79, 156, 0.583), (85, 238, 0.664), (88, 86, 0.906), (88, 87, 0.644), (88, 89, 0.608), (88, 92, 0.723), (88, 151, 0.95), (88, 152, 0.545), (93, 49, 0.696), (99, 100, 0.756), (99, 102, 0.715), (108, 111, 0.709), (115, 108, 0.894), (115, 109, 0.937), (115, 111, 0.927), (115, 113, 0.776), (121, 120, 0.555), (129, 130, 0.682), (134, 22, 0.99), (135, 6, 0.774), (135, 21, 0.608), (136, 95, 0.834), (146, 144, 0.528), (160, 161, 0.984), (166, 164, 0.817), (178, 174, 0.903), (178, 176, 0.76), (178, 180, 0.892), (179, 167, 0.615), (186, 185, 0.98), (189, 188, 0.619), (192, 190, 0.641), (193, 190, 0.503), (203, 201, 0.915), (204, 203, 0.518), (212, 225, 0.693), (217, 216, 0.681), (222, 221, 0.757), (222, 223, 0.646), (222, 228, 0.596), (233, 232, 0.596), (234, 23, 0.94), (234, 235, 0.798), (248, 245, 0.525)]
level = 3
name = _get_class_names(dataset)




'''mine'''
new_edges = [(src,des) for src, des, w in edges]
# new_edges = [(name[src],name[des]) for src, des, w in new_edges]

parents = list(set([src for src, des in new_edges]))
parents_w_parent = [des for src, des in new_edges if des in parents]
parents_wo_parents = [parent for parent in parents if parent not in parents_w_parent]

lv1s = parents_wo_parents
lv2s = []
lv1_to_lv2 = defaultdict(list)
lv2_to_lv3 = None
for src, des in new_edges:
    if src in lv1s:
        lv1_to_lv2[src].append(des)
        lv2s.append(des)

no_to_no = defaultdict(list)
no_child = []
for src, des in new_edges:
    if src in parents_w_parent:
        no_to_no[src].append(des)
        no_child.append(des)

if level == 3:
    lv2_to_lv3 = defaultdict(list)
    for src, des in new_edges:
        if src in lv2s:
            lv2_to_lv3[src].append(des)




tree = {"name":"Root", "children":[]}

# level 2
if level == 2:
    for lv1, lv2s in lv1_to_lv2.items():
        child_list = []
        for lv2 in lv2s:
            if lv2 not in parents_w_parent:
                child_list.append({"name":name[int(lv2)], "value":0})
            if lv2 in parents_w_parent and childchild:
                child_child_list = []
                print(lv2, no_to_no[lv2])
                for lv3 in no_to_no[lv2]:
                    child_child_list.append({"name":name[int(lv3)], "value":0})
                child_list.append({"name":name[int(lv2)], "children":child_child_list})
        tree["children"].extend([{"name":name[lv1], "children":child_list}])

# level3
if level == 3:
    for lv1, lv2s in lv1_to_lv2.items():
        child_list = []
        for lv2, lv3s in lv2_to_lv3.items():
            child_list_2 = []
            for lv3 in lv3s:
                child_list_2.append({"name":name[lv3], "value":0})
            child_list.append({"name":name[int(lv2)], "children":child_list_2})
        tree["children"].extend([{"name":name[lv1], "children":child_list}])


if true:
    file_name = "tree_{}.json".format(dataset)
else:
    file_name = "tree_{}.json".format(checkpoint)
    if childchild:
        file_name = "tree_{}_2.json".format(checkpoint)
save_path = os.path.join('saved_multi', 'tree', file_name)
print(save_path)
with open(save_path, 'w') as f:
    json.dump(tree, f)



# try:
#     wrong_edges = [(name[src], name[des]) for src, des, _ in wrong_edges]
#     for w in wrong_edges:
#         print(w)
# except:
#     pass
